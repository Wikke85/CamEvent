<?xml version="1.0" encoding="utf-8"?>
<core:WindowedApplicationXT xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:core="core.*" xmlns:ws="ws.*"
						layout="vertical" visible="false"
						applicationComplete="onComplete()" 
						activate="setFocusOnOpenWindow(event)" applicationActivate="setFocusOnOpenWindow(event)" 
						mouseDown="setFocusOnOpenWindow(event)" mouseOver="setFocusOnOpenWindow(event)" 
						nativeDragEnter="setFocusOnOpenWindow(event)" 
						paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"
						closeToTray="{Factory.Settings.close_to_tray}"
						trayMenuDocked="{mnuTrayDocked}" trayMenuUndocked="{mnuTrayUndocked}" menuSelect="onMenuSelect(event, '', null)" 
						docked="buildTooltip();" undocked="buildTooltip();"
						resize="callLater(setLayout)"
						showTrayIconWhenUndocked="true" trayIconTogglesDocking="true"
						xmlns:xt="xt.*" xmlns:views="views.*" xmlns:ns="http://ns.adobe.com/air/framework/monitor" xmlns:com="com.*" ><!--
						statusBarFactory="com.StatusBar"-->
	
	<mx:Script>
		<![CDATA[
			import com.CameraView;
			import com.TFactory;
			import com.adobe.serialization.json.JSON;
			import com.events.NativeMenuEvent;
			
			import mx.collections.ArrayCollection;
			import mx.containers.HBox;
			import mx.containers.utilityClasses.ConstraintColumn;
			import mx.containers.utilityClasses.ConstraintRow;
			
			import xt.menu.NativeMenuXT;
			
			
			[Bindable] public var webservicesLocation:String = '';
			[Bindable] public var webservicesLocation2:String = '';
			[Bindable] public var hostName:String = '';
			
			[Bindable] public var startDelay:int = 3; // startup delay in seconds
			[Bindable] public var started:Boolean = false; // startup delay in seconds
			
			[Bindable] public var Factory:TFactory = new TFactory;
			
			[Bindable] public var cameras:ArrayCollection;
			[Bindable] public var cameraViews:ArrayCollection;
			
			//private var dlgSettings:Settings;
			//private var dlgShareConfig:ShareConfigDialog;
			//private var dlgAbout:About;
			
			private var startupTimer:Timer;
			private var runningTimer:Timer;
			private var runningTimerIndex:int = 0;
			
			[Bindable] public var isSharesRunning:Boolean = false;
			
			private var trayIconMain:BitmapData;
			private var trayIconError:BitmapData;
			private var trayIconsRunning:Array = [];
			
			private var camLoader:URLLoader;
			
			[Bindable] public var inErrorMode:Boolean = false;
			
			
			private var _rows:Array;
			private var _columns:Array;
			
			
			private function onComplete():void {
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onTrayIconLoaded, false, 0, true);
				loader.load(new URLRequest('images/16/videocamera.png'));
				
			}
			
			private function onTrayIconLoaded(event:Event):void {
				//if(runningTimerIndex == 0){
					trayIconMain = event.target.content.bitmapData;
					trayIcon = trayIconMain;
				/*}
				else {
					trayIconsRunning.push(event.target.content.bitmapData);
				}
				
				if(trayIconsRunning.length < 16){
					runningTimerIndex++;
					var loader:Loader = new Loader();
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onTrayIconLoaded, false, 0, true);
					loader.load(new URLRequest('images/embedded/16/sync_running_f' + (runningTimerIndex < 10 ? '0' : '') + runningTimerIndex + '.png'));
					
				}
				else*/ {
					
					buildTooltip();
					
					continueStart();
					
				}
			}
			
			private function continueStart():void {
				runningTimer = new Timer(100);
				runningTimer.addEventListener(TimerEvent.TIMER, runningTimerTick, false, 0, true);
				runningTimer.start();
				
				buildMenu();
				
				cameras = new ArrayCollection;
				cameraViews = new ArrayCollection;
				
				camLoader = new URLLoader;
				camLoader.addEventListener(Event.COMPLETE, onCamerasLoaded);
				camLoader.addEventListener(IOErrorEvent.IO_ERROR, onCamerasError);
				
				// werk pc
				if(File.documentsDirectory.nativePath.toLowerCase().indexOf('wifle.prosteps') > -1){
					camLoader.load(new URLRequest('http://wikke.duckdns.org:8010/camera/?action=jcameras'));
				}
					// thuis
				else {	
					camLoader.load(new URLRequest('http://192.168.1.10/camera/?action=jcameras'));
				}
				
			}
			
			private function onCamerasLoaded(event:Event):void {
				var c:Object;
				try {
					c = com.adobe.serialization.json.JSON.decode(camLoader.data);
				}
				catch(e:Error){
					
				}
				if(c != null && c.hasOwnProperty('data') && c.data != null && c.data is Array && c.data.length > 0){
					cameras.source = c.data;
					continueStart2();
				}
				else {
					doFallback();
				}
			}
			
			private function onCamerasError(event:IOErrorEvent):void {
				doFallback();
			}
			
			private function doFallback():void {
				// werk pc
				if(File.documentsDirectory.nativePath.toLowerCase().indexOf('wifle.prosteps') > -1){
					cameras.addItem({
						description: 'Cam1 - www',
						address: 'wikke.duckdns.org:8031',
						address_fallback: 'wikke.duckdns.org:8051',
						channel: 'motion:cam1',
						type: 'raspimjpg'
					});
					cameras.addItem({
						description: 'Cam2 - www',
						address: 'http://wikke.duckdns.org:8080/?action=stream&type=mjpg',
						address_fallback: 'http://wikke.duckdns.org:8080/?action=stream&type=mjpg',
						channel: 'motion:cam1',
						type: 'mjpg'
					});
				}
					// thuis
				else {	
					cameras.addItem({
						description: 'Cam1 - local',
						address: '192.168.1.31',
						address_fallback: '192.168.1.51',
						channel: 'motion:cam1',
						type: 'raspimjpg'
					});
					cameras.addItem({
						description: 'Cam2 - local',
						address: 'http://192.168.1.1:8080/?action=stream&type=mjpg',
						address_fallback: 'http://192.168.1.1:8080/?action=stream&type=mjpg',
						channel: 'motion:cam1',
						type: 'mjpg'
					});
				}
				continueStart2();
			}
			
			private function continueStart2():void {
				
				
				callLater(setLayout);
				
				/*
				
				if(hostName == '' || webservicesLocation == ''){
				showSettings('Please specify the following data in order to continue:');
				}
				else {
				getHost();
				}
				*/
				
				if(startDelay > 0){
					startupTimer = new Timer(startDelay * 1000, 1);
					startupTimer.addEventListener(TimerEvent.TIMER, onStartTimer, false, 0, true);
					startupTimer.start();
				}
			}
			
			private function onStartTimer(event:TimerEvent = null):void {
				startupTimer.stop();
				started = true;
			}
			
			private function setLayout():void {
				if(cameras != null && cameras.length > 0 && (rpt.dataProvider == null || rpt.dataProvider.length == 0)){
					
					var n:Number = Number(cameras.length);
					var cols:Number = Math.max(1, Math.ceil(Math.sqrt(n)));
					var rows:Number = Math.max(1, Math.ceil(n / cols));
					
					var cr:int = 0, cc:int = 0, i:int = 0, j:int = 0, m:int = 0;
					var row:HBox;
					
					
					_rows = new Array();
					_columns = new Array();
					
					for(i = 0; i < rows; i++) {
						var constraintRow:ConstraintRow = new ConstraintRow();
						constraintRow.id = "row" + i;
						// Take 10 pixels padding into account
						//constraintRow.height = Math.round((cnv.height - 20) / rows);
						constraintRow.percentHeight = 100 / rows;
						constraintRow.y = 10 + j * constraintRow.height;
						_rows.push(constraintRow);
						
						for(j = 0; j < cols; j++) {
							// Dynamically create the constraint rows
							// to allow the layout to be dynamic, but only
							// the first time we enter this loop
							if(i == 0) {
								var constraintCol:ConstraintColumn = new ConstraintColumn();
								constraintCol.id = "col" + j;
								// Take 10 pixels padding into account
								//constraintCol.width = Math.round((cnv.width - 20) / cols);
								constraintCol.percentWidth = 100 / cols;
								constraintCol.x = 10 + j * constraintCol.width;
								_columns.push(constraintCol);
							}
							
							if(cameras.length == m){
								cameras.addItem({
									description: '',
									address: '',
									address_fallback: '',
									channel: '',
									type: ''
								});
							}
							cameras[m].y_pos = i;
							cameras[m].x_pos = j;
							m++;
							
						}
					}
					
					// Attach the constraint rows and columns to the layout
					cnv.constraintRows = _rows;
					cnv.constraintColumns = _columns;
					
					
					
					var cv:CameraView;
					
					/*if(width > 900 || height > 700){
						tn.visible = tn.includeInLayout = false;
						tn.removeAllChildren();
						
						tile.visible = tile.includeInLayout = true;
						//tile.dataProvider = camerasTiled;
						
						if(tile.numChildren == 0){
							for(i=0; i<cameras.length; i++){
								if(cc == 0 || cc >= cols){
									cr = 0;
									row = new HBox;
									row.percentHeight = 100;
									row.percentWidth = 100;
									tile.addChild(row);
								}
								//camerasTiled[camerasTiled.length - 1].cols.addItem(cameras[i]);
								
								cv = new CameraView;
								cv.data = cameras[i];
								row.addChild(cv);
								
								cc++;
								
								if(cc >= cols){
									cc = 0;
									cr++;
								}
							}
						}
						
					}
					else {
						tile.visible = tile.includeInLayout = false;
						//tile.dataProvider = [];
						tile.removeAllChildren();
						
						tn.visible = tn.includeInLayout = true;
						if(tn.numChildren == 0){
							for(i=0; i<cameras.length; i++){
								
								cv = new CameraView;
								cv.data = cameras[i];
								tn.addChild(cv);
								
							}
						}
					}*/
					
					rpt.dataProvider = cameras;
				}
			}
			
			
			[Bindable('webservicesLocationChanged')]
			public function get getWebservicesLocation():String {
				return webservicesLocation;
			}
			
			override public function setFocusOnOpenWindow(event:Event):void {
				super.setFocusOnOpenWindow(event);
				
				//if(dlgSettings				!= null && dlgSettings.visible				) dlgSettings.regetFocus(null);
				
				//if(dlgShareConfig			!= null && dlgShareConfig.visible			) dlgShareConfig.regetFocus(null);
				
				//if(dlgAbout					!= null && dlgAbout.visible					) dlgAbout.regetFocus(null);
				
				callLater( Factory.setDialogToFront );
				
			}
			
			/*
			public function checkNoError(event:WebserviceEvent):Boolean {
				if(event == null){
					return false;
				}
				else if(event.datatype == WebserviceEvent.TYPE_JSONERROR){
					// JSON parse error
					trace(event.message);
					trace(event.data);
					//setStatus(event.message, 10);
					return false;
				}
				else if(event.datatype == WebserviceEvent.TYPE_ERROR){
					// webservice returned error
					trace(event.message);
					trace(event.data);
					//setStatus(event.message, 10);
					return false;
				}
				else if(event.datatype == WebserviceEvent.TYPE_INFO){
					// webservice returned message info
					trace(event.message);
					//trace(event.data);
					return true;
				}
				else {
					return true;
				}
			}
			
			
			private function serviceFault(event:FaultEvent):void {
				//setStatus(event.message, 10);
				//set alternative location for ws, or if already set, show error
			}
			*/
			
			/*
			private function getHost():void {
				srv.getHost(hostName, Capabilities.os);
			}
			
			private function getHostResult(event:WebserviceEvent):void {
				if(event.data != null && event.data.length > 0){
					getSettings();
				}
				else {
					// host could not be initiated
					buildTooltip(' - Error');
					setStatus('No host configured or could not be found!', 0);
				}
			}
			
			public function getSettings():void {
				srv.getSettings(user.id_host);
			}
			
			private function getSettingsResult(event:WebserviceEvent):void {
				inErrorMode = false;
				
				var d:Array = event.data as Array;
				d.push({
					edittype: 'text',
					code: 'hostName',
					value: hostName,
					description: 'Host name',
					tooltip: 'The host name identifier for this PC - Must be unique',
					editable: true,
					category: Factory.Settings.CAT_CONNECTION
				});
				d.push({
					edittype: 'text',
					code: 'webservicesLocation',
					value: webservicesLocation,
					description: 'Webservices location',
					tooltip: 'The URL where the webservices are located',
					editable: true,
					category: Factory.Settings.CAT_CONNECTION
				});
				d.push({
					edittype: 'text',
					code: 'webservicesLocation2',
					value: webservicesLocation2,
					description: 'Webservices location (backup)',
					tooltip: 'The backup URL where the webservices are located, in case when the main location cannot be found',
					editable: true,
					category: Factory.Settings.CAT_CONNECTION
				});
				Factory.Settings.assign(d);
				
				try {
					if(Factory.Settings.launch_with_windows){
						dock();
					}
					else {
						undock();
					}
					NativeApplication.nativeApplication.startAtLogin = Factory.Settings.launch_with_windows;
				}
				catch(e:Error){
					
				}
				
				viewStats();
				getShares();
			}
			
			public function getShares():void {
				//viewStats();
				srv.getShares(user.id_host);
			}
			
			private function getSharesResult(event:WebserviceEvent):void {
				shares = new ArrayCollection;
				sharesActive = new ArrayCollection;
				
				var share:Share;
				
				for(var i:int=0; i<event.data.length; i++){
					share = new Share(event.data[i]);
					shares.addItem(share);
					if(share.id_host_share > 0){
						sharesActive.addItem(share);
					}
				}
				
				buildTooltip();
				vwSharesActive.load();
			}
			*/
			/*
			private function showSettings(extraLabel:String = ''):void {
				// initial load
				if(Factory.Settings.data == null){
					var d:Array = [];
					d.push({
						edittype: 'text',
						code: 'hostName',
						value: hostName,
						description: 'Host name',
						tooltip: 'The host name identifier for this PC - Must be unique',
						editable: true,
						category: Factory.Settings.CAT_CONNECTION
					});
					d.push({
						edittype: 'text',
						code: 'webservicesLocation',
						value: webservicesLocation,
						description: 'Webservices location',
						tooltip: 'The URL where the webservices are located',
						editable: true,
						category: Factory.Settings.CAT_CONNECTION
					});
					d.push({
						edittype: 'text',
						code: 'webservicesLocation2',
						value: webservicesLocation2,
						description: 'Webservices location (backup)',
						tooltip: 'The backup URL where the webservices are located, in case when the main location cannot be found',
						editable: true,
						category: Factory.Settings.CAT_CONNECTION
					});
					Factory.Settings.assign(d);
				}
				
				if(dlgSettings == null){
					dlgSettings = new Settings;
					dlgSettings.open(true);
					dlgSettings.nativeWindow.x = (width  - dlgSettings.width )/2;
					dlgSettings.nativeWindow.y = (height - dlgSettings.height)/2;
					dlgSettings.nativeWindow.width = dlgSettings.width + 20;
					dlgSettings.nativeWindow.height = dlgSettings.height + 30;
					dlgSettings.addEventListener('saveClick', onSettingsSaveClick, false, 0, true);
				}
				
				dlgSettings.load(extraLabel);
				
			}
			
			private function onSettingsSaveClick(event:Event):void {
				
				//getHost();
			}
			
			*/
			
			
			
			//[Bindable] public var mnuTray:NativeMenuXT;
			[Bindable] public var mnuTrayDocked:NativeMenuXT;
			[Bindable] public var mnuTrayUndocked:NativeMenuXT;
			public var mnuMain:NativeMenuXT;
			
			public var allMenuItems:String = 
				'NewUser,NewProject,NewDeliverable,' + 
				'DashboardCommand,ManageProjectCommand,ManagePhasesCommand,' + 
				'ManageUsersCommand,ProfileCommand,SettingsCommand,' + 
				'ShowAuditCommand,MyDeliverablesCommand,MyMailsCommand,' + 
				'Separator,' + 
				'AboutCommand'
				;
			
			public function onMenuSelect(event:Event = null, _action:String = '', extraData:Object = null):void {
				var action:String;
				if(event is NativeMenuEvent){
					action = (event as NativeMenuEvent).data != null ? (event as NativeMenuEvent).data.action : null;
				}
				else if(event != null){
					action = event.target.data != null ? event.target.data.action : null;
				}
				else {
					action = _action;
				}
				
				if(action == null){
					setStatus('Menu action is not declared! ("'+event.target.label+'")');
				}
				else if(action.split(' ').join('') == ''){
					setStatus('Menu action is empty! ("'+event.target.label+'")');
				}
				else 
				{
					action = action.toLowerCase();
					switch(action){
						case 'exit':	exit();	break;
						case 'dock':	dock();		break;
						case 'undock':	undock();	break;
						//case 'newuser':	editUser();	break;
						case 'maximize':maximize();	break;
						case 'minimize':minimize();	break;
						
						case 'overview':
							//vsMain.selectedChild = vwKasOverzicht;
							//vwKasOverzicht.load();
							break;
						
						case 'do_order':
							//vsMain.selectedChild = vwEnterOrder;
							//vwEnterOrder.load();
							break;
						
						case 'do_editorder':
							//vsMain.selectedChild = vwEditOrder;
							//vwEditOrder.load();
							break;
						
						
						case 'pauseall':
							
							break;
						
						case 'resumeall':
							
							break;
						
						/*
						case 'mysettings':
						case 'changesettings':
							showSettings();
							break;
						
						case 'about':
							if(dlgAbout == null){
								dlgAbout = new About;
								dlgAbout.open(true);
								dlgAbout.nativeWindow.x = (width  - dlgAbout.width )/2;
								dlgAbout.nativeWindow.y = (height - dlgAbout.height)/2;
							}
							dlgAbout.load();
							break;
						*/
						case 'setsize1024x768':
						case 'setsize800x600':
						case 'setsize1280x1024':
							restore();
							this.width	= int(action.split('setsize').join('').split('x')[0]);
							this.height	= int(action.split('setsize').join('').split('x')[1]);
							break;
						
						case 'reloadmenu':	buildMenu();		break;
						case 'reloadicons':	buildMenuItems();	break;
						
						default:
							setStatus('Menu action is not implemented: ' + action + ' ("'+event.target.label+'")');
					}
				}
			}
			
			public function buildMenu():void {
				//Setting a window menu:
				mnuMain = new NativeMenuXT( readXmlFile('data/main_menu.xml') );
				mnuTrayDocked = new NativeMenuXT( readXmlFile('data/traymenu_invisible.xml') );
				mnuTrayUndocked = new NativeMenuXT( readXmlFile('data/traymenu_visible.xml') );
				
				nativeWindow.menu = mnuMain;
				nativeWindow.menu.addEventListener(Event.SELECT, onMenuSelect, false, 0, true);
				
				buildMenuItems();
				
				
			}			
			
			
			public function updateMenuItems():void {
				trace('updateMenuItems');
				/*
				if(mnuMain != null && mnuMain.getMenuItemById('LogoutCommand') != null) mnuMain.getMenuItemById('LogoutCommand').enabled = user.id_host > 0;
				
				if(mnuMain != null && mnuMain.getMenuItemById('EnterDepositCommand') != null) mnuMain.getMenuItemById('EnterDepositCommand').enabled = true;//user.allow_editdeposits;
				if(mnuMain != null && mnuMain.getMenuItemById('EditOrderCommand') != null) mnuMain.getMenuItemById('EditOrderCommand').enabled = true;//user.allow_editorders;
				
				if(mnuMain != null && mnuMain.getMenuItemById('KassaOverviewCommand') != null) mnuMain.getMenuItemById('KassaOverviewCommand').enabled = true;//user.allow_overview;
				if(mnuMain != null && mnuMain.getMenuItemById('EnterOrderCommand') != null) mnuMain.getMenuItemById('EnterOrderCommand').enabled = true;//user.allow_order;
				*/
			}
			
			private function buildMenuItems():void {
				trace('buildMenuItems');
				
				/*boxIcons.removeAllChildren();
				var customMenuIcon:MenuButton;
				for(var i:int=0; i<user.menu_items.length; i++){
				
				// if menu item from user exists, e.g. if it is in 'allMenuItems'
				if( String( ',' + allMenuItems + ',' ).indexOf( ',' + user.menu_items[i] + ',' ) != -1 ){
				
				customMenuIcon = new MenuButton;
				if(user.menu_items[i] != 'Separator')
				customMenuIcon.menuName = user.menu_items[i];
				else
				customMenuIcon.isSeparator = true;
				boxIcons.addChild( customMenuIcon );
				}
				}*/
				updateMenuItems();
			}
			
			
			
			
			
			// Menu items
			/*
			public function viewLog():void {
				vs.selectedChild = vwLog;
				callLater(vwLog.load);
			}
			
			public function viewStats():void {
				vs.selectedChild = vwStats;
				callLater(vwStats.load);
			}
			
			public function viewSharesActive():void {
				vs.selectedChild = vwSharesActive;
				//callLater(vwSharesActive.load);
			}
			
			public function viewSharesAll():void {
				vs.selectedChild = vwSharesOverview;
				//callLater(vwSharesOverview.load);
			}
			*/
			
			
			public function buildTooltip(extra:String = ''):void {
				var t:String = applicationName;
				var st:String = '';
				
				t += '';
				
				if(extra != ''){
					t += extra;
				}
				
				var running:Boolean = false;
				
				var replIndex:int = -1;
				if(SystemTrayIcon(nativeApplication.icon).menu != null){
					
					for(var m:int=SystemTrayIcon(nativeApplication.icon).menu.numItems - 1; m>=0; m--){
						if(
							SystemTrayIcon(nativeApplication.icon).menu.items[m] is NativeMenuItem 
							&&
							(SystemTrayIcon(nativeApplication.icon).menu.items[m] as NativeMenuItem).data != null
							&& 
							(SystemTrayIcon(nativeApplication.icon).menu.items[m] as NativeMenuItem).data.hasOwnProperty('action')
							&&
							(SystemTrayIcon(nativeApplication.icon).menu.items[m] as NativeMenuItem).data.action == 'status'
						){
							//if(replIndex < 0){
								replIndex = m;
							//}
							
							SystemTrayIcon(nativeApplication.icon).menu.removeItemAt(m);
							
						}
					}
					
					var item:NativeMenuItem, l:String;
					if(replIndex >= 0){
						
						/*
						if(sharesActive.length > 0){
							st += '[';
						}
						
						for(var s:int=0; s<sharesActive.length; s++){
							l = sharesActive[s].name;
							l += ': ';
							
							for(var v:int=0; v<vwSharesActive.numChildren; v++){
								if(vwSharesActive.getChildAt(v) is ShareProcessIndex && (vwSharesActive.getChildAt(v) as ShareProcessIndex).share.id_share == sharesActive[s].id_share){
									l += (vwSharesActive.getChildAt(v) as ShareProcessIndex).lblStatus.text;
									
									if((vwSharesActive.getChildAt(v) as ShareProcessIndex).currentStep != ShareProcessIndex.STEP_IDLE){
										st += (s > 0 ? ', ' : '') + sharesActive[s].name;
										running = true;
									}
									
									if( (vwSharesActive.getChildAt(v) as ShareProcessIndex).pbManual.visible ){
										l += ' (' + (vwSharesActive.getChildAt(v) as ShareProcessIndex).pbManual.label.replace('File ', '') + ')';
										st += ' ' + (vwSharesActive.getChildAt(v) as ShareProcessIndex).pbManual.label.replace('File ', '').replace(' of ', '/') + '';
									}
									
								}
							}
							
							item = new NativeMenuItem(l);
							item.label = l;
							item.enabled = false;
							item.data = {action: 'status'};
							item.name = 'status'+s;
							SystemTrayIcon(nativeApplication.icon).menu.addItemAt(item, replIndex);
						}
						if(sharesActive.length > 0){
							st += ']';
						}
						*/
					}
					else {
						item = new NativeMenuItem('Loading...');
						item.label = 'Loading...';
						item.enabled = false;
						item.data = {action: 'status'};
						item.name = 'statusl';
						SystemTrayIcon(nativeApplication.icon).menu.addItemAt(item, 3);
					}
					
				}
				
				isSharesRunning = running;
				if(running){
					if(runningTimer && !runningTimer.running){
						//runningTimer.start();
					}
				}
				else {
					runningTimerIndex = 0;
					trayIcon = inErrorMode ? trayIconError : trayIconMain;
					if(runningTimer && runningTimer.running){
						//runningTimer.stop();
					}
				}
				
				trayToolTip = t + (st == '' || st == '[]' ? '' : ' ' + st);
			}
			
			private function runningTimerTick(event:TimerEvent):void {
				if(isSharesRunning){
					runningTimerIndex++;
					if(runningTimerIndex > 16){
						runningTimerIndex = 1;
					}
					trayIcon = trayIconsRunning.length > runningTimerIndex-1 ? trayIconsRunning[runningTimerIndex-1] : ('images/embedded/16/sync_running_f' + (runningTimerIndex < 10 ? '0' : '') + runningTimerIndex + '.png');
				}
				
				var now:Date = new Date;
				/*
				for(var s:int=0; s<sharesActive.length; s++){
					for(var v:int=0; v<vwSharesActive.numChildren; v++){
						if(vwSharesActive.getChildAt(v) is ShareProcessIndex && (vwSharesActive.getChildAt(v) as ShareProcessIndex).share.id_share == sharesActive[s].id_share){
							
							if(
								(vwSharesActive.getChildAt(v) as ShareProcessIndex).currentStep == ShareProcessIndex.STEP_IDLE
								&&
								(vwSharesActive.getChildAt(v) as ShareProcessIndex).share.date_next_run != null
								&&
								(vwSharesActive.getChildAt(v) as ShareProcessIndex).share.date_next_run.time <= now.time
							){
								(vwSharesActive.getChildAt(v) as ShareProcessIndex).start();
							}
							
						}
					}
				}
				*/
			}
			
			
		]]>
	</mx:Script>
	
	<mx:Style source="styles/default.css"/>
	
	<!--
	<mx:TabNavigator id="tn" width="100%" height="100%" visible="false" includeInLayout="false">
	</mx:TabNavigator>
	
	<mx:VBox id="tile" width="100%" height="100%" visible="false" includeInLayout="false">
	</mx:VBox>
	-->
	
	<mx:Canvas id="cnv" width="100%" height="100%">
		<mx:Repeater id="rpt" width="100%" height="100%">
			<com:CameraView data="{rpt.currentItem}"
							left="col{rpt.currentItem.x_pos}:0" right="col{rpt.currentItem.x_pos}:0"
							top="row{rpt.currentItem.y_pos}:0" bottom="row{rpt.currentItem.y_pos}:0"/>
		</mx:Repeater>
	</mx:Canvas>
	
</core:WindowedApplicationXT>
